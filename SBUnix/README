Member                  SBUID:Junao Wang 		110077822Bo Feng                 110533595Qingqing Cao            110452148Our target: Preemptive OS — 70 ptsRing-3 Processes which cannot access kernel data. COW fork, auto-growing stack, demand paging heap, SEGV handling (we didn’t implement exception table for validating parameters of syscalls)Implemented 23 fast system calls via SYSCALL/SYSRET. System call handler only saves callee-saved registers for the sake of speed.Preemptive scheduling schdules every 0.25 second.Idle kernel thread halts the CPU whenever there is no other process/kernel thread to run.Init process, which is created by idle thread, returns to ring3, then forks a child process to execute the shell and itself waits for the shell to return. When the shell process exits, it will fork a shell again. This guarantees that the OS will not hang when shell exits unexpectedly.

Instructions:

Add new directories and files into rootfs and its sub-directories(e.g., rootfs/bin/) first(no make clean after the adding), and make, then boot the kernel, you should be able to see those directories and files you added.

The root directory is rootfs/, and the default directory at the beginning is rootfs/bin/, you can “cd ..” or “cd” to go to rootfs/.

The SBUINX supports ls, ps, cat, sleep, echo, cd and sh command, type the name of the executables into shell to run them(e.g., hello). We provide fork_demo and execv_demo under rootfs/bin to test our fork and execv functions.

cd: e.g., “cd ..” “cd” “cd bin” “cd mnt”
cat: “cat filename”


 